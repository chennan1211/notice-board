{"remainingRequest":"/Users/better_cn/projects/notice-board1/node_modules/_vue-loader@15.9.6@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/better_cn/projects/notice-board1/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--0-0!/Users/better_cn/projects/notice-board1/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js??vue-loader-options!/Users/better_cn/projects/notice-board1/src/components/NoticeBoard.vue?vue&type=template&id=73e5f424&","dependencies":[{"path":"/Users/better_cn/projects/notice-board1/src/components/NoticeBoard.vue","mtime":1610645460437},{"path":"/Users/better_cn/projects/notice-board1/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/better_cn/projects/notice-board1/node_modules/_vue-loader@15.9.6@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/better_cn/projects/notice-board1/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/better_cn/projects/notice-board1/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}