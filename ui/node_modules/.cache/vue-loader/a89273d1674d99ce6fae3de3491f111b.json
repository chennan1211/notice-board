{"remainingRequest":"/Users/better_cn/projects/notice-board1/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/better_cn/projects/notice-board1/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/better_cn/projects/notice-board1/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/better_cn/projects/notice-board1/src/components/NoticeBoard.vue?vue&type=template&id=73e5f424&","dependencies":[{"path":"/Users/better_cn/projects/notice-board1/src/components/NoticeBoard.vue","mtime":1610645091931},{"path":"/Users/better_cn/projects/notice-board1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/better_cn/projects/notice-board1/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/better_cn/projects/notice-board1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/better_cn/projects/notice-board1/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiaGVsbG8iIH0sIFsKICAgIF92bS5fbSgwKSwKICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWFpbi1jb250ZW50IiB9LCBbCiAgICAgIF9jKAogICAgICAgICJkaXYiLAogICAgICAgIHsgc3RhdGljQ2xhc3M6ICJub3RpY2VzLWNvbnRlbnQiLCBjbGFzczogeyBoaWRlOiBfdm0uaXNIaWRlIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJtYWluLWhlYWRlciIgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJzcGFuIiwgW192bS5fdigi5pyA5paw5YWs5ZGKIildKSwKICAgICAgICAgICAgICBfYygiYi1pbnB1dCIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAic2VhcmNoLWlucHV0IiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAi5pCc57SiLi4uIiwKICAgICAgICAgICAgICAgICAgdHlwZTogInNlYXJjaCIsCiAgICAgICAgICAgICAgICAgIGljb246ICJtYWduaWZ5IgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uc2VhcmNoVGV4dCwKICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikgewogICAgICAgICAgICAgICAgICAgIF92bS5zZWFyY2hUZXh0ID0gJCR2CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJzZWFyY2hUZXh0IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImItYnV0dG9uIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJhZGQtYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgY2xhc3M6IHsgaGlkZTogIV92bS5pc0FkbWluIH0sCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJpcy1wcmltYXJ5IGlzLWxpZ2h0Iiwgc2l6ZTogImlzLXNtYWxsIiB9LAogICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub3Blbk5vdGljZU1vZGFsKCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCLmt7vliqDlhazlkYoiKV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImItYnV0dG9uIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJhZG1pbi1idXR0b24iLAogICAgICAgICAgICAgICAgICBjbGFzczogeyBoaWRlOiBfdm0uaXNBZG1pbiB9LAogICAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAiaXMtcHJpbWFyeSBpcy1saWdodCIsIHNpemU6ICJpcy1zbWFsbCIgfSwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICBfdm0uaXNsb2dpbk1vZGFsQWN0aXZlID0gdHJ1ZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIueuoeeQhuWRmOeZu+mZhiIpXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImItbW9kYWwiLCB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAiaGFzLW1vZGFsLWNhcmQiOiAiIiwKICAgICAgICAgICAgICAgICAgInRyYXAtZm9jdXMiOiAiIiwKICAgICAgICAgICAgICAgICAgImRlc3Ryb3ktb24taGlkZSI6IGZhbHNlLAogICAgICAgICAgICAgICAgICAiYXJpYS1yb2xlIjogImRpYWxvZyIsCiAgICAgICAgICAgICAgICAgICJhcmlhLWxhYmVsIjogIkV4YW1wbGUgTW9kYWwiLAogICAgICAgICAgICAgICAgICAiYXJpYS1tb2RhbCI6ICIiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgc2NvcGVkU2xvdHM6IF92bS5fdShbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBrZXk6ICJkZWZhdWx0IiwKICAgICAgICAgICAgICAgICAgICBmbjogZnVuY3Rpb24ocHJvcHMpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJsb2dpbi1tb2RhbC1mb3JtIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9zZTogcHJvcHMuY2xvc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dpbjogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5pc0FkbWluID0gdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5pc2xvZ2luTW9kYWxBY3RpdmUsCiAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICAgICAgICBfdm0uaXNsb2dpbk1vZGFsQWN0aXZlID0gJCR2CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJpc2xvZ2luTW9kYWxBY3RpdmUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYi1idXR0b24iLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImFkbWluLWJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgIGNsYXNzOiB7IGhpZGU6ICFfdm0uaXNBZG1pbiB9LAogICAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAiaXMtcHJpbWFyeSBpcy1saWdodCIsIHNpemU6ICJpcy1zbWFsbCIgfSwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICBfdm0uaXNBZG1pbiA9IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigi566h55CG5ZGY6YCA5Ye6IildCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJ1bCIsCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfdm0uX2woX3ZtLmRpc3BsYXlOb3RpY2VzLCBmdW5jdGlvbihub3RpY2UpIHsKICAgICAgICAgICAgICAgIHJldHVybiBfYygKICAgICAgICAgICAgICAgICAgImxpIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGtleTogbm90aWNlLmluZGV4LAogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaXRlbSIsCiAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vcGVuTm90aWNlKG5vdGljZSkKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJsZWZ0IG5vdGljZS10aXRsZSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhub3RpY2UudGl0bGUpKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJiLWljb24iLCB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInJpZ2h0IiwKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiB7IGhpZGU6ICFfdm0uaXNBZG1pbiB9LAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWNvbjogImRlbGV0ZSIgfSwKICAgICAgICAgICAgICAgICAgICAgIG5hdGl2ZU9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmRlbGV0ZU5vdGljZShub3RpY2UsIHRydWUpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICBfYygiYi1pY29uIiwgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJyaWdodCIsCiAgICAgICAgICAgICAgICAgICAgICBjbGFzczogeyBoaWRlOiAhX3ZtLmlzQWRtaW4gfSwKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjBweCAxMHB4IiB9LAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWNvbjogInNxdWFyZS1lZGl0LW91dGxpbmUiIH0sCiAgICAgICAgICAgICAgICAgICAgICBuYXRpdmVPbjogewogICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vcGVuTm90aWNlTW9kYWwobm90aWNlLCB0cnVlKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAicmlnaHQiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3Mobm90aWNlLnRpbWUpKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfdm0uZGlzcGxheU5vdGljZXMubGVuZ3RoID09PSAwCiAgICAgICAgICAgICAgICA/IF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJpdGVtIiB9LCBbX3ZtLl92KCLmmoLml7bml6DlhazlkYoiKV0pCiAgICAgICAgICAgICAgICA6IF92bS5fZSgpCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDIKICAgICAgICAgICksCiAgICAgICAgICBfYygiYi1tb2RhbCIsIHsKICAgICAgICAgICAgc2NvcGVkU2xvdHM6IF92bS5fdShbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAga2V5OiAiZGVmYXVsdCIsCiAgICAgICAgICAgICAgICBmbjogZnVuY3Rpb24ocHJvcHMpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIFsKICAgICAgICAgICAgICAgICAgICBfYygibm90aWNlLW1vZGFsLWZvcm0iLCB7CiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBpc0VkaXQ6IF92bS5pc0VkaXQsCiAgICAgICAgICAgICAgICAgICAgICAgIG5vdGljZTogX3ZtLmN1cnJlbnROb3RpY2VJbk1vZGFsCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgb246IHsgY2xvc2U6IHByb3BzLmNsb3NlLCBwdWJsaXNoOiBfdm0ucHVibGlzaCB9CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSksCiAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgdmFsdWU6IF92bS5pc05vdGljZU1vZGFsQWN0aXZlLAogICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICAgIF92bS5pc05vdGljZU1vZGFsQWN0aXZlID0gJCR2CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBleHByZXNzaW9uOiAiaXNOb3RpY2VNb2RhbEFjdGl2ZSIKICAgICAgICAgICAgfQogICAgICAgICAgfSkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgeyBzdGF0aWNDbGFzczogImNvbnRleHQiLCBjbGFzczogeyBoaWRlOiAhX3ZtLmlzSGlkZSB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJiLWJ1dHRvbiIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogeyBzaXplOiAiaXMtc21hbGwiIH0sCiAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS50b2dnbGUoKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigi6L+U5Zue5YiX6KGoIildCiAgICAgICAgICApLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0aXRsZSIgfSwgWwogICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5jb250ZXh0LnRpdGxlKSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0aW1lIiB9LCBbCiAgICAgICAgICAgIF92bS5fdigi5Y+R5biD5pel5pyf77yaIiArIF92bS5fcyhfdm0uY29udGV4dC50aW1lKSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0IiB9LCBbCiAgICAgICAgICAgIF9jKCJwIiwgeyBkb21Qcm9wczogeyBpbm5lckhUTUw6IF92bS5fcyhfdm0uY29udGV4dC50ZXh0KSB9IH0pCiAgICAgICAgICBdKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApCiAgICBdKSwKICAgIF92bS5fbSgxKQogIF0pCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFsKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJoZWFkZXIiLCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibm90aWNlcy1oZWFkZXIiIH0pLAogICAgICBfYygiZGl2IiwgWwogICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1uYW1lIiB9LCBbCiAgICAgICAgICBfdm0uX3YoIuaIkOmDveWVhuaKpeiQpemUgOetluWIkuaciemZkOWFrOWPuOaLm+agh+S/oeaBr+e9kSIpCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJmb290ZXIiLCB7IHN0YXRpY0NsYXNzOiAibm90aWNlcy1mb290ZXIiIH0sIFsKICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAibGVmdCIgfSwgWwogICAgICAgIF92bS5fdigi5oiQ6YO95ZWG5oql6JCl6ZSA562W5YiS5pyJ6ZmQ5YWs5Y+45oub5qCH5L+h5oGv572RIikKICAgICAgXSksCiAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInJpZ2h0IiB9LCBbCiAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAibG9nbyIgfSksCiAgICAgICAgX3ZtLl92KCIg5oiQ6YO95ZWG5oql6JCl6ZSA562W5YiS5pyJ6ZmQ5YWs5Y+4ICIpCiAgICAgIF0pCiAgICBdKQogIH0KXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}